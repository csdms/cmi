!---- Input file for LTRANS with parameters grouped ---
!------ the following used to be in LTRANS.inc ----


!*** NUMBER OF PARTICLES ***
$numparticles

  numpar = ${numpar}         ! Number of particles

$end



!*** TIME PARAMETERS ***
$timeparam

  days   = ${days}           ! Number of days to run the model
  iprint = ${iprint}         ! Print interval for LTRANS output (s); 3600 = every hour
  dt     = ${dt}             ! External time step (duration between hydro model predictions) (s) 
  idt    = ${idt}            ! Internal (particle tracking) time step (s)

$end



!*** ROMS HYDRODYNAMIC MODULE PARAMETERS ***
$hydroparam

  us         = ${us}          ! Number of Rho grid s-levels in ROMS hydro model
  ws         = ${ws}          ! Number of W grid s-levels in ROMS hydro model
  tdim       = ${tdim}        ! Number of time steps per ROMS hydro predictions file
  hc         = ${hc}          ! Min Depth - used in ROMS S-level transformations
  z0         = ${z0}          ! ROMS roughness parameter
  UVmaskEdit = ${UVmaskEdit}  ! Which fix needed for boundary module
                              !   If TRUE, adjust U & V Masks to add extra wet U & V elements
                              !   If FALSE, adjust Rho Mask to change the boundaries and cut off
                              !     areas not covered by the current U and V grid wet elements
  Vtransform = ${Vtransform}  ! 1-WikiRoms Eq. 1, 2-WikiRoms Eq. 2, 3-Song/Haidvogel 1994 Eq.
                              !
  readZeta   = ${readZeta}    ! If .TRUE. read in sea-surface height   (zeta) from NetCDF file, else use constZeta
  constZeta  = ${constZeta}   ! Constant value for Zeta if readZeta is .FALSE.
  readSalt   = ${readSalt}    ! If .TRUE. read in salinity             (salt) from NetCDF file, else use constSalt
  constSalt  = ${constSalt}   ! Constant value for Salt if readSalt is .FALSE.
  readTemp   = ${readTemp}    ! If .TRUE. read in temperature          (temp) from NetCDF file, else use constTemp
  constTemp  = ${constTemp}   ! Constant value for Temp if readTemp is .FALSE.
  readDens   = ${readDens}    ! If .TRUE. read in water density        (rho ) from NetCDF file, else use constDens
  constDens  = ${constDens}   ! Constant value for Density if readDens is .FALSE.
  readU      = ${readU}       ! If .TRUE. read in u-momentum component (U   ) from NetCDF file, else use constU
  constU     = ${constU}      ! Constant value for U if readU is .FALSE.
  readV      = ${readV}       ! If .TRUE. read in v-momentum component (V   ) from NetCDF file, else use constV
  constV     = ${constV}      ! Constant value for V if readV is .FALSE.
  readW      = ${readW}       ! If .TRUE. read in w-momentum component (W   ) from NetCDF file, else use constW
  constW     = ${constW}      ! Constant value for W if readW is .FALSE.
  readAks    = ${readAks}     ! If .TRUE. read in salinity vertical diffusion coefficient (Aks ) from NetCDF file, else use constAks
  constAks   = ${constAks}    ! Constant value for Aks if readAks is .FALSE.

$end



!*** TURBULENCE MODULE PARAMETERS ***
$turbparam

  HTurbOn       = ${HTurbOn}        ! Horizontal Turbulence on (.TRUE.) or off (.FALSE.)
  VTurbOn       = ${VTurbOn}        ! Vertical   Turbulence on (.TRUE.) or off (.FALSE.)
  ConstantHTurb = ${ConstantHTurb}  ! Constant value of horizontal turbulence (m2/s)

$end



!*** BEHAVIOR MODULE PARAMETERS ***
$behavparam

  Behavior = ${Behavior}      ! Behavior type (specify a number)
                              !   Note: The behavior types numbers are: 
                              !     0 Passive, 1 near-surface, 2 near-bottom, 3 DVM, 
                              !     4 C.virginica oyster larvae, 5 C.ariakensis oyster larvae, 
                              !     6 constant, 7 Tidal Stream Transport)
  OpenOceanBoundary = ${OpenOceanBoundary}  ! Note: If you want to allow particles to "escape" via open ocean 
                              !   boundaries, set this to TRUE; Escape means that the particle 
                              !   will stick to the boundary and stop moving
  deadage = ${deadage}        ! Age at which a particle stops moving (i.e., dies) (s)
                              !   Note: deadage stops particle motion for all behavior types
  pediage = ${pediage}        ! Age when particle reaches max swim speed and can settle (s)
  		              !   Note: for oyster larvae behavior types (4 & 5),
                              !     pediage = age at which a particle becomes a pediveliger
                              !   Note: pediage does not cause particles to settle if 
                              !     the Settlement module is not on
  swimstart = ${swimstart}    ! Age that swimming or sinking begins (s) 1 day = 1.*24.*3600.
  swimslow  = ${swimslow}     ! Swimming speed when particle begins to swim (m/s)
  swimfast  = ${swimfast}     ! Maximum swimming speed (m/s)  0.05 m/s for 5 mm/s
                              !   Note: for constant swimming speed for behavior types 1,2 & 3, 
                              !     set swimslow = swimfast = constant speed
  Sgradient = ${Sgradient}    ! Salinity gradient threshold that cues larval behavior (psu/m)
		              !   Note: This parameter is only used if Behavior = 4 or 5. 
  sink      = ${sink}         ! Sinking velocity for behavior type 6
		              !   Note: This parameter is only used if Behavior = 6.

! Tidal Stream Transport behavior type:
  Hswimspeed = ${Hswimspeed}  ! Horizontal swimming speed (m/s)
  Swimdepth  = ${Swimdepth}   ! Depth at which fish swims during flood time 
                              ! in meters above bottom (this should be a positive value)

$end



!*** DVM. The following are parameters for the Diurnal Vertical Migration (DVM) behavior type ***
!  Note: These values were calculated for September 1 at the latitude of 37.0 (Chesapeake Bay mouth)
!  Note: Variables marked with ** were calculated with light_v2BlueCrab.f (not included in LTRANS yet)
!  Note: These parameters are only used if Behavior = 3 
$dvmparam

  twistart  = ${twistart}     ! Time of twilight start (hr) **
  twiend    = ${twiend}       ! Time of twilight end (hr) **
  daylength = ${daylength}    ! Length of day (hr) **
  Em        = ${Em}           ! Irradiance at solar noon (microE m^-2 s^-1) **
  Kd        = ${Kd}           ! Vertical attenuation coefficient
  thresh    = ${thresh}       ! Light threshold that cues behavior (microE m^-2 s^-1)

$end



!*** SETTLEMENT MODULE PARAMETERS ***
$settleparam

 settlementon = ${settlementon}  ! settlement module on (.TRUE.) or off (.FALSE.)
                                 ! Note: If settlement is off: set minholeid, maxholeid, minpolyid,
                                 !   maxpolyid, pedges, & hedges to 1
                                 !   to avoid both wasted variable space and errors due to arrays of size 0.
                                 ! If settlement is on and there are no holes: set minholeid,
                                 !   maxholeid, and hedges to 1
 holesExist = ${holesExist}      ! Are there holes in habitat? yes(TRUE) no(FALSE)
 minpolyid  = ${minpolyid}       ! Lowest habitat polygon id number
 maxpolyid  = ${maxpolyid}       ! Highest habitat polygon id number
 minholeid  = ${minholeid}       ! Lowest hole id number
 maxholeid  = ${maxholeid}       ! Highest hole id number
 pedges     = ${pedges}          ! Number of habitat polygon edge points (# of rows in habitat polygon file)
 hedges     = ${hedges}          ! Number of hole edge points (number of rows in holes file)

$end



!*** CONVERSION MODULE PARAMETERS ***
$convparam

  PI = ${PI}                                  ! Pi
  Earth_Radius = ${Earth_Radius}              ! Equatorial radius of Earth (m)
  MercatorProjection = ${MercatorProjection}  ! Mercator projection from SEAGRID (T/F)
  latmin = ${latmin}                          ! Minimum longitude value, only used if MercatorProjection is .FALSE.
  lonmin = ${lonmin}                          ! Minimum  latitude value, only used if MercatorProjection is .FALSE.
$end



!*** INPUT FILE NAME AND LOCATION PARAMETERS ***; 
! ** ROMS NetCDF Model Grid file **
  !Note: the path to the file is necessary if the file is not in the same folder as the code
  !Note: if .nc file in separate folder in Linux, then include path. For example:
  !      CHARACTER(LEN=29), PARAMETER :: NCgridfile = '/share/enorth/CPB_GRID_wUV.nc' 
  !Note: if .nc file in separate folder in Windows, then include path. For example:
  !      CHARACTER(LEN=23), PARAMETER :: NCgridfile = 'D:\ROMS\CPB_GRID_wUV.nc'
$romsgrid
!  NCgridfile='http://omglnx1.meas.ncsu.edu:8080/thredds/dodsC/models/SABGOM/archive2/2010/his/his_20100524_ltrans.nc'
!  NCgridfile='http://omglnx1.meas.ncsu.edu:8080/thredds/dodsC/models/SABGOM/archive2/2010/his/his_20100526_ltrans.nc'
!  NCgridfile='http://omglnx1.meas.ncsu.edu:8080/thredds/dodsC/models/SABGOM/archive2/2010/his/his_20100422.nc'
!  NCgridfile= 'http://omglnx1.meas.ncsu.edu:8080/thredds/dodsC/models/SABGOM/sabgom_grd_H.nc'
!  NCgridfile = 'http://geoport.whoi.edu/thredds/dodsC/usgs/csherwood/ltrans_demo/CPB_GRID_wUV.nc'  !Filename 
!  NCgridfile = 'http://geoport.whoi.edu/thredds/dodsC/usgs/csherwood/ltrans_demo/CPB_GRID_wUV.nc'  !Filename 
!  NCgridfile = '/peach/data1/rsignell/Models/ltrans/data/sabgom_grd_H.nc'
!  NCgridfile='/share/enorth/SABGOM/sabgom_his_0001.nc'
NCgridfile = ${NCgridfile}

$end


! ** ROMS Predictions NetCDF Input File **
  !Filename = prefix + filenum + suffix
  !Note: the path to the file is necessary if the file is not in the same folder as the code
  !Note: if .nc file in separate folder in Windows, then include path in prefix. For example:
  !      CHARACTER(LEN=15), PARAMETER :: prefix='D:\ROMS\y95hdr_'   
  !      if .nc file in separate folder in Linux, then include path in prefix. For example:
  !      CHARACTER(LEN=26), PARAMETER :: prefix='/share/lzhong/1995/y95hdr_'   
$romsoutput
!  prefix='/share/enorth/SABGOM/sabgom_his_'
  prefix    = ${prefix}        ! NetCDF Input Filename prefix
  suffix    = ${suffix}        ! NetCDF Input Filename suffix
  filenum   = ${filenum}       ! Number in First NetCDF Input Filename
  numdigits = ${numdigits}     ! Number of digits in number portion of file name (with leading zeros)
  startfile = ${startfile}     ! Is it the first file, i.e. does the file have an additional time step?
  modanum   = ${modanum}
$end


! ** Particle Location Input File **
  !Note: the path to the file is necessary if the file is not in the same folder as the code
$parloc

  parfile  = ${parfile}    !Particle locations 

$end


! ** Habitat Polygon Location Input Files **
  !Note: the path to the file is necessary if the file is not in the same folder as the code
$habpolyloc

  habitatfile = ${habitatfile}    !Habitat polygons
  holefile    = ${holefile}       !Holes in habitat

$end


! ** Output Related Variables **
$output

  !NOTE: Full path must already exist.  Model can create files, but not directories.
  outpath      = ${outpath}        ! Location to write output files
  NCOutFile    = ${NCOutFile}
  outpathGiven = ${outpathGiven}   ! If TRUE files are written to the path given in outpath
  writeCSV     = ${writeCSV}       ! If TRUE write CSV output files
  writeNC      = ${writeNC}        ! If TRUE write .NC output files

$end



!*** OTHER PARAMETERS *** 
$other

  seed            = ${seed}              ! Seed value for random number generator (Mersenne Twister)
  BoundaryBLNs    = ${BoundaryBLNs}      ! Create Surfer Blanking Files of boundaries? .TRUE.=yes, .FALSE.=no
  SaltTempOn      = ${SaltTempOn}        ! Calculate salinity and temperature at particle 
        		                 ! location: yes (.TRUE.) or no (.FALSE.)
  interfacial     = ${interfacial}       ! interfacial tension (N/m) for oil code
  oilAging        = ${oilAging}          ! is oil aging turned on?
  diameterAgeRate = ${diameterAgeRate}   !rate at which diameter decreases (m/s)
  densityAgeRate  = ${densityAgeRate}    !rate at which density increases (kg/m3s) 

  ijbuff          = ${ijbuff}            ! number of extra elements to read in on every side of the particles

$end