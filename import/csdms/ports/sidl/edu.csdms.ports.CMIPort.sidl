
// DO-NOT-DELETE bocca.splicer.begin(edu.comment)

// Insert-UserCode-Here {edu.comment} (Insert your package comments here)
// DO-NOT-DELETE bocca.splicer.end(edu.comment)
package edu version 0.0 {

    // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.comment)
    
// Insert-UserCode-Here {edu.csdms.comment} (Insert your package comments here)
    // DO-NOT-DELETE bocca.splicer.end(edu.csdms.comment)
    package csdms {

        // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.ports.comment)
        
// Insert-UserCode-Here {edu.csdms.ports.comment} (Insert your package comments here)
        // DO-NOT-DELETE bocca.splicer.end(edu.csdms.ports.comment)
        package ports {

            // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.ports.CMIPort.comment)
            
// Insert-UserCode-Here {edu.csdms.ports.CMIPort.comment} (Insert your port comments here)
            // DO-NOT-DELETE bocca.splicer.end(edu.csdms.ports.CMIPort.comment)
            interface CMIPort extends gov.cca.Port
            {
                // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.ports.CMIPort.methods)
                
// Insert-UserCode-Here {edu.csdms.ports.CMIPort.methods} (Insert your port methods here)

                
                bool CMI_initialize(in string config_file);	                	

                
                bool prepare(in string config_file);	                	

                
                bool CMI_run_for(in double time_interval, in string time_units, in string stop_rule, in array<double> stop_vars);	                	

                
                bool CMI_run(in double time_interval);	                	

                
                bool run(in double time_interval);	                	

                
                bool CMI_finalize();	                	

                
                bool finish();	                	

                
                bool CMI_run_model(in string config_file, in string stop_rule, in double stop_var);	                	

                
                double CMI_get_start_time();	                	

                
                double CMI_get_current_time();	                	

                
                double CMI_get_end_time();	                	

                
                array<> CMI_get_values(in string long_var_name);	                	

                
                void CMI_set_values(in string long_var_name, in array<> in_values);	                	

                
                string CMI_get_status();	                	

                
                string CMI_get_component_name();	                	

                
                array<string> CMI_get_input_item_list();	                	

                
                array<string> CMI_get_output_item_list();	                	

                
                bool CMI_has_output_item(in string long_var_name);	                	

                
                bool CMI_has_input_item(in string long_var_name);	                	

                
                void CMI_get_required_ports();	                	

                
                void CMI_release_required_ports();	                	

                
                array<> CMI_get_values_at_indices(in string long_var_name, in array<int> indices);	                	

                
                void CMI_set_values_at_indices(in string long_var_name, in array<int> indices, in array<> in_values);	                	

                
                void CMI_print_traceback();	                	

                // Grid information
                // Uniform rectilinear
                array<double, 1> CMI_get_grid_spacing(in string long_var_name);	                	

                
                array<double, 1> get_grid_spacing(in string long_var_name);	                	

                
                array<double, 1> CMI_get_grid_lower_left(in string long_var_name);	                	

                
                array<double, 1> get_grid_lower_left(in string long_var_name);	                	

                
                array<int, 1> CMI_get_grid_shape(in string long_var_name);	                	

                
                array<int, 1> get_grid_shape(in string long_var_name);	                	

                // Non-uniform rectilinear, curvilinear
                array<double, 1> CMI_get_grid_x(in string long_var_name);	                	

                
                array<double, 1> get_grid_x(in string long_var_name);	                	

                
                array<double, 1> CMI_get_grid_y(in string long_var_name);	                	

                
                array<double, 1> get_grid_y(in string long_var_name);	                	

                
                array<double, 1> CMI_get_grid_z(in string long_var_name);	                	

                
                array<double, 1> get_grid_z(in string long_var_name);	                	

                // Unstructured
                array<int, 1> get_grid_connectivity(in string long_var_name);	                	

                
                array<int, 1> get_grid_offset(in string long_var_name);	                	

                
                edu.csdms.cmi.IGrid get_grid(in string long_var_name);	                	

                
                array<double, 1> get_grid_values(in string long_var_name);	                	

                
                void set_grid_values(in string long_var_name, in array<double, 1> vals);	                	

                // DO-NOT-DELETE bocca.splicer.end(edu.csdms.ports.CMIPort.methods)
            }
        }
    }
}
