
// DO-NOT-DELETE bocca.splicer.begin(edu.comment)

// Insert-UserCode-Here {edu.comment} (Insert your package comments here)
// DO-NOT-DELETE bocca.splicer.end(edu.comment)
package edu version 0.0 {

    // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.comment)
    
// Insert-UserCode-Here {edu.csdms.comment} (Insert your package comments here)
    // DO-NOT-DELETE bocca.splicer.end(edu.csdms.comment)
    package csdms {

        // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.openmi.comment)
        
// Insert-UserCode-Here {edu.csdms.openmi.comment} (Insert your package comments here)
        // DO-NOT-DELETE bocca.splicer.end(edu.csdms.openmi.comment)
        package openmi {

            // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.openmi.IElementSet.comment)
            
// Insert-UserCode-Here {edu.csdms.openmi.IElementSet.comment} (Insert your interface comments here)
            // DO-NOT-DELETE bocca.splicer.end(edu.csdms.openmi.IElementSet.comment)
            interface IElementSet
            {
                // DO-NOT-DELETE bocca.splicer.begin(edu.csdms.openmi.IElementSet.methods)
                
// Insert-UserCode-Here {edu.csdms.openmi.IElementSet.methods} (Insert your interface methods here)

                //-------------------------------------------------    
                //  Identification String
                //  <p/>EXAMPLE: <p/>"River Branch 34", "Node 34"
                //-------------------------------------------------
                string getID();	                	

                //--------------------------------------
                //  Additional descriptive information
                //--------------------------------------
                string getDescription();	                	

                //----------------------------------------------------------------------------
                //  The SpatialReference defines the spatial reference to be used in
                //  association with the coordinates in the ElementSet. For all ElementSet
                //  Types except ElementType.IDBased a spatial reference must be defined. For
                //  ElementSets of type ElementType.IDBased the SpatialReference property may
                //  be null.
                //  <p/>EXAMPLE: <p/>SpatialReference.ID = "WG84" or "Local coordinate
                //  system".
                //----------------------------------------------------------------------------
                ISpatialReference getSpatialReference();	                	

                //---------------------------------
                //  ElementType of the elementset
                //---------------------------------
                ElementType getElementType();	                	

                //----------------------------------------
                //  Number of elements in the ElementSet
                //----------------------------------------
                int getElementCount();	                	

                //----------------------------------------------------------------------------
                //  The current version number for the populated ElementSet. The version must
                //  be incremented if anything inside the ElementSet is changed.
                //----------------------------------------------------------------------------
                int getVersion();	                	

                //----------------------------------------------------------------------------
                //  Index of element 'ElementID' in the elementset. Indexes start from zero.
                //  There are not restrictions to how elements are ordered.
                //
                //  @param elementID Identification String for the element for which the
                //                  element index is requested. If no element in the
                //                  ElementSet has the specified elementID, an exception
                //                  must be thrown. .
                //----------------------------------------------------------------------------
                int getElementIndex(in string elementID);	                	

                //----------------------------------------------------------------------------
                //  Returns ID of 'ElementIndex'-th element in the ElementSet. Indexes start
                //  from zero.
                //
                //  @param elementIndex The element index for which the element ID is
                //                      requested. If the element index is outside the range
                //                      [0, number of elements -1], and exception must be
                //                      thrown. .
                //----------------------------------------------------------------------------
                string getElementID(in int elementIndex);	                	

                //----------------------------------------------------------------------------
                //  Number of vertices for the element specified by the elementIndex.
                //  <p/>If the GetVertexCount()method is invoked for ElementSets of type
                //  ElementType.IDBased, an exception must be thrown.
                //
                //  @param elementIndex <p/>The element index for the element for which the
                //                      number of vertices is requested.  <p/>
                //                      <p/>If the element index is outside the range [0,
                //                      number of elements -1], and exception must be thrown.
                //                     .
                //  @return Number of vertices in element defined by the elementIndex.
                //----------------------------------------------------------------------------
                int getVertexCount(in int elementIndex);	                	

                //----------------------------------------------------------------------------
                //  Returns the number of faces in an element.
                //
                //  @param elementIndex <p/>Index for the element  <p/>
                //                      <p/>If the element index is outside the range [0,
                //                      number of elements -1], and exception must be thrown.
                //
                //  @return Number of faces.
                //----------------------------------------------------------------------------
                int getFaceCount(in int elementIndex);	                	

                //---------------------------------------------------------
                //  Gives an array with the vertex indices for a face.
                //
                //  @param elementIndex Element index.
                //  @param faceIndex    Face index.
                //  @return The vertex indices for this face.
                //---------------------------------------------------------
                array<int, 1> getFaceVertexIndices(in int elementIndex, in int faceIndex);	                	

                // int[] getFaceVertexIndices(in int elementIndex, in int faceIndex);
                //  ***************************
                //  ***************************
                //-----------------------------------------------------------------------------
                //  X-coord for the vertex with VertexIndex of the element with ElementIndex.
                //
                //  @param elementIndex element index.
                //  @param vertexIndex  vertex index in the element with index ElementIndex.
                //-----------------------------------------------------------------------------
                double getXCoordinate(in int elementIndex, in int vertexIndex);	                	

                //-----------------------------------------------------------------------------
                //  Y-coord for the vertex with VertexIndex of the element with ElementIndex.
                //
                //  @param elementIndex element index.
                //  @param vertexIndex  vertex index in the element with index ElementIndex.
                //-----------------------------------------------------------------------------
                double getYCoordinate(in int elementIndex, in int vertexIndex);	                	

                //-----------------------------------------------------------------------------
                //  Z-coord for the vertex with VertexIndex of the element with ElementIndex.
                //
                //  @param elementIndex element index.
                //  @param vertexIndex  vertex index in the element with index ElementIndex.
                //-----------------------------------------------------------------------------
                double getZCoordinate(in int elementIndex, in int vertexIndex);	                	

                // DO-NOT-DELETE bocca.splicer.end(edu.csdms.openmi.IElementSet.methods)
            }
        }
    }
}
